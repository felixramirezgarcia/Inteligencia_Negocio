<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="parallelcoords_namespace"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="%%00010(parallelcoords_namespace = function() {%%00010    var input = {};%%00010    var _data;%%00010    var layoutContainer;%%00010    var MIN_HEIGHT = 300, MIN_WIDTH = 400;%%00010    var MISSING_VALUE_MODE = &quot;Show\u00A0missing\u00A0values&quot;;%%00010    %%00010    var _representation, _value;%%00010    var mzd, w, h, plotG, bottomBar, scales;%%00010    var scaleCols, extents;%%00010    var brushes = {};%%00010    var xBrush, xExtent;%%00010    var draggingNow = false;%%00010    var dragging = {};%%00010    var line;%%00010    var rowsSelected = false;%%00010    var colors;%%00010    var sortedCols = [];%%00010    var oldHeight,oldWidth, ordinalScale, xBrushScale;%%00010    var filterIds = [];%%00010    var currentFilter = null;%%00010    %%00010    input.init = function(representation, value) {  %%00010        _value = value;%%00010        _representation = representation;%%00010        //alert(JSON.stringify(_value.options.selectedrows));%%00010        %%00010        d3.select(&quot;html&quot;).style(&quot;width&quot;, &quot;100%&quot;).style(&quot;height&quot;, &quot;100%&quot;);%%00010        d3.select(&quot;body&quot;).style(&quot;width&quot;, &quot;100%&quot;).style(&quot;height&quot;, &quot;100%&quot;);%%00010        %%00010        var body = d3.select(&quot;body&quot;);%%00010        %%00010        _data = createData(representation);%%00010        // initially included columns%%00010        sortedCols =_data.colNames;%%00010%%00010%%00009%%00009layoutContainer = body.append(&quot;div&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;layoutContainer&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-layout-container&quot;)%%00010%%00009%%00009%%00009.style(&quot;min-width&quot;, MIN_WIDTH + &quot;px&quot;);%%00010%%00010        if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010            layoutContainer.style(&quot;width&quot;, &quot;100%&quot;)%%00010            .style(&quot;height&quot;, &quot;100%&quot;);%%00010        } else {%%00010            layoutContainer.style(&quot;width&quot;, _representation.options.svg.width + &quot;px&quot;)%%00010            .style(&quot;height&quot;, _representation.options.svg.height + &quot;px&quot;);%%00010        }%%00010%%00010        createControls();%%00010%%00010        var div = layoutContainer.append(&quot;div&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;svgContainer&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-svg-container&quot;)%%00010            .style(&quot;min-width&quot;, MIN_WIDTH + &quot;px&quot;)%%00010            .style(&quot;min-height&quot;, MIN_HEIGHT + &quot;px&quot;);%%00010%%00010        var svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010        div[0][0].appendChild(svg1);%%00010%%00010        var d3svg = d3.select(&quot;svg&quot;);%%00010        d3svg.append(&quot;rect&quot;).attr(&quot;id&quot;, &quot;bgr&quot;).attr(&quot;fill&quot;, _representation.options.backgroundColor);%%00010%%00010        var plotG = d3svg.append(&quot;g&quot;).attr(&quot;id&quot;, &quot;plotG&quot;);%%00010        plotG.append(&quot;rect&quot;).attr(&quot;id&quot;, &quot;da&quot;).attr(&quot;fill&quot;, _representation.options.daColor);%%00010        %%00010        d3svg.append(&quot;text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;title&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-title&quot;)%%00010            .attr(&quot;x&quot;, 20)%%00010            .attr(&quot;y&quot;, 30)%%00010            .text(_value.options.title);%%00010%%00010        d3svg.append(&quot;text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;subtitle&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-subtitle&quot;)%%00010            .attr(&quot;x&quot;, 20)%%00010            .attr(&quot;y&quot;, 46)%%00010            .text(_value.options.subtitle);%%00010        %%00010        plotG.append(&quot;line&quot;)%%00010        %%00009.attr(&quot;stroke&quot;, &quot;rgba(0,0,0,0.5)&quot;)%%00010        %%00009.attr(&quot;stroke-width&quot;, &quot;2&quot;)%%00010        %%00009.attr(&quot;id&quot;, &quot;yMarker&quot;)%%00010        %%00009.attr(&quot;visibility&quot;, &quot;hidden&quot;);%%00010%%00010        drawChart(); %%00010        %%00010        // draw saved brushes%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing){%%00010        %%00009drawSavedBrushes();%%00010        }%%00010        // select saved (selected) rows%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; !_value.options.selections){%%00010        %%00009selectRows();%%00010        }%%00010        if (_representation.options.enableSelection &amp;&amp; _value.options.selectedrows){%%00010        %%00009selectRows();%%00010        }%%00010        checkClearSelectionButton();%%00010        saveSelected();%%00010    };%%00010    %%00010    function sortArray(sorted, toInclude){%%00010%%00009%%00009var array = [];%%00010%%00009%%00009for (i = 0; i &lt; sorted.length; i++){%%00010%%00009%%00009%%00009for (j = 0; j &lt; toInclude.length; j++){%%00010%%00009%%00009%%00009%%00009if (sorted[i] == toInclude[j]){%%00010%%00009%%00009%%00009%%00009%%00009array.push(sorted[i]);%%00010%%00009%%00009%%00009%%00009} %%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009return array;%%00010%%00009};%%00010%%00009%%00010%%00009function filterColumns(cols){%%00010%%00009%%00009var includedColumns = [];%%00010%%00009%%00009for (var col = 0; col &lt; cols.length; col++){%%00010%%00009%%00009%%00009var idx = getDataColumnID(cols[col], _representation.inObjects[0]);%%00010%%00009%%00009%%00009if (_representation.inObjects[0].spec.colTypes[idx] === &quot;string&quot; || _representation.inObjects[0].spec.colTypes[idx] === &quot;number&quot; %%00010%%00009%%00009%%00009%%00009|| _representation.inObjects[0].spec.colTypes[idx] === &quot;dateTime&quot;){%%00010%%00009%%00009%%00009%%00009includedColumns.push(cols[col]);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009return includedColumns;%%00010%%00009}%%00010%%00010    function createData(representation) {%%00010    %%00009var data = { objects : [], colNames : [], colTypes : {}, domains : {}, minmax : {} };%%00010    %%00009var table = representation.inObjects[0];%%00010    %%00009%%00010    %%00009filterIds = [];%%00010    %%00009for (var i = 0; i &lt; table.spec.filterIds.length; i++) {%%00010    %%00009%%00009if (table.spec.filterIds[i]) {%%00010    %%00009%%00009%%00009filterIds.push(table.spec.filterIds[i]);%%00010    %%00009%%00009}%%00010    %%00009}%%00010    %%00009if (filterIds.length &lt; 1) {%%00010    %%00009%%00009filterIds = null;%%00010    %%00009}%%00010%%00010    %%00009var catColIdx = getDataColumnID(_representation.options.catCol, table);%%00010    %%00009var indices = {};%%00010%%00010    %%00009var columnNames;%%00010    %%00009if (_representation.options.enableAxesSwapping &amp;&amp; _value.options.sortedCols %%00010    %%00009%%00009%%00009&amp;&amp; _value.options.sortedCols.length &gt; 0 &amp;&amp; !_value.options.columns) {%%00010    %%00009%%00009columnNames = _value.options.sortedCols;%%00010    %%00009}%%00010    %%00009if (_representation.options.enableAxesSwapping &amp;&amp; _value.options.sortedCols %%00010    %%00009%%00009%%00009&amp;&amp; _value.options.sortedCols.length &gt; 0 &amp;&amp; _value.options.columns) {%%00010    %%00009%%00009if (_value.options.sortedCols.length &lt; _value.options.columns.length){%%00010        %%00009%%00009columnNames = sortArray(sortedCols, _value.options.columns);%%00010        %%00009} else {%%00010        %%00009%%00009columnNames = sortArray(_value.options.sortedCols, _value.options.columns);%%00010        %%00009%%00009//sortedCols[_value.options.sortedCols.length] = _value.options.sortedCols;%%00010        %%00009}%%00010    %%00009%%00009/*if (_value.options.sortedCols.length == _data.colNames.length){%%00010    %%00009%%00009%%00009sortedCols =_value.options.sortedCols;%%00010    %%00009%%00009}*/%%00010    %%00009} else {%%00010    %%00009%%00009columnNames = filterColumns(_value.options.columns);%%00009%%00010    %%00009};%%00010    %%00009%%00010    %%00009for (var col = 0; col &lt; columnNames.length; col++) {%%00010    %%00009%%00009var columnName;%%00010        %%00009columnName = columnNames[col];%%00010    %%00009%%00009data.colNames.push(columnName);%%00010    %%00009%%00009var idx = getDataColumnID(columnName, table);%%00010    %%00009%%00009indices[columnName] = idx;%%00010    %%00009%%00009data.colTypes[columnName] = table.spec.colTypes[idx];%%00010    %%00009%%00009if (table.spec.colTypes[idx] === &quot;string&quot;) {%%00010    %%00009%%00009%%00009data.domains[columnName] = d3.set();%%00010    %%00009%%00009} else {%%00010    %%00009%%00009%%00009data.minmax[columnName] = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];%%00010    %%00009%%00009}%%00010    %%00009}%%00010%%00010    %%00009if (catColIdx != null) {%%00010    %%00009%%00009data.domains[_representation.options.catCol] = d3.set();%%00010    %%00009}%%00010%%00009    for (var r = 0; r &lt; table.rows.length; r++) {%%00010%%00009%%00009%%00009var row = table.rows[r].data;%%00010%%00009%%00009%%00009var obj = {};%%00010%%00009%%00009%%00009for (var col = 0; col &lt; _value.options.columns.length; col++) {%%00010%%00009%%00009%%00009%%00009obj[_value.options.columns[col]] = row[indices[_value.options.columns[col]]];%%00010%%00009%%00009%%00009%%00009if(obj[_value.options.columns[col]]===null) {%%00010%%00009%%00009%%00009%%00009%%00009obj.containsMissing = true;%%00010%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (_representation.options.useColors) {%%00010%%00009%%00009%%00009%%00009obj.color = table.spec.rowColorValues[r];%%00010%%00009%%00009%%00009} else if (catColIdx) {%%00010%%00009%%00009%%00009%%00009obj.color = row[catColIdx];%%00010%%00009%%00009%%00009}%%00010%%00009%%00010%%00009%%00009%%00009for (var key in data.domains) {%%00010%%00009%%00009%%00009%%00009var val = row[indices[key]];%%00010%%00009%%00009%%00009%%00009if (val != null) {%%00010%%00009%%00009%%00009%%00009%%00009data.domains[key].add(val);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009for(var key in data.minmax) {%%00010%%00009%%00009%%00009%%00009var val = row[indices[key]];%%00010%%00009%%00009%%00009%%00009if (val != null) {%%00010%%00009%%00009%%00009%%00009%%00009data.minmax[key][0] = Math.min(data.minmax[key][0], val);%%00010%%00009%%00009%%00009%%00009%%00009data.minmax[key][1] = Math.max(data.minmax[key][1], val);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009obj.id = table.rows[r].rowKey; %%00010%%00009%%00009%%00009data.objects.push(obj);%%00010%%00009%%00009}%%00010%%00010    %%00009return data;%%00010    };%%00010    %%00010    function isSorted(cols) {%%00010        for (i = 1; i &lt; cols.length; i++) {%%00010            if (position(cols[i]) &lt; position(cols[i-1])) return false;%%00010        }%%00010        return true;%%00010    };%%00010%%00010    function getDataColumnID(columnName, table) {%%00010%%00009%%00009var colID = null;%%00010%%00009%%00009for (var i = 0; i &lt; table.spec.numColumns; i++) {%%00010%%00009%%00009%%00009if (table.spec.colNames[i] === columnName) {%%00010%%00009%%00009%%00009%%00009colID = i;%%00010%%00009%%00009%%00009%%00009break;%%00010%%00009%%00009%%00009};%%00010%%00009%%00009};%%00010%%00009%%00009return colID;%%00010%%00009};%%00010%%00010    function createControls() {%%00010    %%00009%%00010    %%00009if (!knimeService) {%%00010%%00009%%00009%%00009// TODO: error handling?%%00010%%00009%%00009%%00009return;%%00010%%00009%%00009}%%00010%%00009%%00009%%00010    %%00009// -- Buttons --%%00010%%00009%%00009if (_representation.options.displayFullscreenButton) {%%00010%%00009%%00009%%00009knimeService.allowFullscreen();%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009if (_representation.options.displayClearSelectionButton &amp;&amp;  _representation.options.enableSelection) {%%00010%%00009%%00009%%00009knimeService.addButton(&quot;clearSelectionButton&quot;, &quot;minus-square-o&quot;, &quot;Clear selection&quot;, function(){%%00010%%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed({&quot;selected&quot;: false, &quot;knime-selected&quot;: false, &quot;unselected&quot;: false });%%00010%%00009%%00009%%00009%%00009clearBrushes();%%00010%%00009%%00009%%00009%%00009publishCurrentSelection();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009d3.select(&quot;#clearSelectionButton&quot;).classed(&quot;inactive&quot;, true);%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009// -- Initial interactivity settings --%%00010        if (knimeService.isInteractivityAvailable()) {%%00010        %%00009if (_representation.options.enableSelection &amp;&amp; _value.options.subscribeSelection) {%%00010        %%00009%%00009knimeService.subscribeToSelection(_representation.inObjects[0].id, selectionChanged);%%00010%%00009%%00009%%00009}%%00010        %%00009if (filterIds &amp;&amp; _value.options.subscribeFilter) {%%00010%%00009%%00009%%00009%%00009knimeService.subscribeToFilter(_representation.inObjects[0].id, filterChanged, filterIds);%%00010%%00009%%00009%%00009}%%00010        }%%00010%%00009%%00009%%00010        // -- Menu Items --%%00010%%00009%%00009if (!_representation.options.enableViewControls) {%%00010%%00009%%00009%%00009return;%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009if (_representation.options.enableTitleEdit) {%%00010%%00009%%00009%%00009var plotTitleText = knimeService.createMenuTextField('plotTitleText', _value.options.title, function() {%%00010%%00009%%00009%%00009%%00009var hadTitles = (_value.options.title.length &gt; 0) || (_value.options.subtitle.length &gt; 0);%%00010%%00009%%00009%%00009%%00009_value.options.title = this.value;%%00010%%00009%%00009%%00009%%00009var hasTitles = (_value.options.title.length &gt; 0) || (_value.options.subtitle.length &gt; 0);%%00010%%00009%%00009%%00009%%00009d3.select(&quot;#title&quot;).text(this.value);%%00010%%00009%%00009%%00009%%00009if (hasTitles != hadTitles) {%%00010%%00009%%00009%%00009%%00009%%00009drawChart(true);%%00010%%00009%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009%%00009}}, true);%%00010%%00009%%00009%%00009knimeService.addMenuItem('Plot Title:', 'header', plotTitleText);%%00010%%00009%%00009};%%00010%%00010%%00009%%00009if (_representation.options.enableSubtitleEdit) {%%00010%%00009%%00009%%00009var plotSubtitleText = knimeService.createMenuTextField('plotSubtitleText', _value.options.subtitle, function() {%%00010%%00009%%00009%%00009%%00009var hadTitles = (_value.options.title.length &gt; 0) || (_value.options.subtitle.length &gt; 0);%%00010%%00009%%00009%%00009%%00009_value.options.subtitle = this.value;%%00010%%00009%%00009%%00009%%00009var hasTitles = (_value.options.title.length &gt; 0) || (_value.options.subtitle.length &gt; 0);%%00010%%00009%%00009%%00009%%00009d3.select(&quot;#subtitle&quot;).text(this.value);%%00010%%00009%%00009%%00009%%00009if (hasTitles != hadTitles) {%%00010%%00009%%00009%%00009%%00009%%00009drawChart(true);%%00010%%00009%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}, true);%%00010%%00009%%00009%%00009knimeService.addMenuItem('Plot Subtitle:', 'header', plotSubtitleText, null, knimeService.SMALL_ICON);%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.enableTitleEdit || _representation.options.enableSubtitleEdit %%00010%%00009%%00009%%00009%%00009|| _representation.options.enableMValuesHandling &amp;&amp; containMissing()) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.enableMValuesHandling &amp;&amp; containMissing()) {%%00010%%00010%%00010%%00009%%00009%%00009var missingMenuSelect = knimeService.createMenuSelect('missingMenuSelect','Skip\u00A0rows\u00A0with\u00A0missing\u00A0values', ['Skip\u00A0rows\u00A0with\u00A0missing\u00A0values','Skip\u00A0missing\u00A0values',MISSING_VALUE_MODE], function() {%%00010%%00009%%00009%%00009%%00009_value.options.mValues = this.value;%%00010%%00009%%00009%%00009%%00009if (this.value == 'Skip\u00A0rows\u00A0with\u00A0missing\u00A0values'){%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty() ) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp;_representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009getExtents();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawBrushes();%%00010%%00009%%00009%%00009%%00009%%00009%%00009brush();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (this.value == 'Skip\u00A0missing\u00A0values'){%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty() ) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp;_representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009getExtents();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawBrushes();%%00010%%00009%%00009%%00009%%00009%%00009%%00009brush();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009extraRows();%%00010%%00009%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (this.value == MISSING_VALUE_MODE){%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp;_representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009getExtents();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009drawBrushes();%%00010%%00009%%00009%%00009%%00009%%00009%%00009brush();%%00010%%00009%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009%%00009extraRows();%%00010%%00009%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Missing values:', 'braille', missingMenuSelect);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if ((_representation.options.enableTitleEdit || _representation.options.enableSubtitleEdit) %%00010%%00009%%00009%%00009%%00009&amp;&amp; _representation.options.enableMValuesHandling &amp;&amp; containMissing()) {%%00010%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (_representation.options.enableLineChange) {%%00010%%00009%%00009%%00009var lineTypeRadio = knimeService.createInlineMenuRadioButtons('lineType', 'lineType', %%00010%%00009%%00009%%00009%%00009%%00009_value.options.lType, [&quot;Straight&quot;, &quot;Curved&quot;], function() {%%00010%%00009%%00009%%00009%%00009_value.options.lType = this.value;%%00010%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty() ) {%%00010%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009%%00009&amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp;_representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009getExtents();%%00010%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009drawChart();%%00010%%00009%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected){%%00010%%00009%%00009%%00009%%00009%%00009drawBrushes();%%00010%%00009%%00009%%00009%%00009%%00009brush();%%00010%%00009%%00009%%00009%%00009};%%00010%%00009%%00009%%00009%%00009applyFilter();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Line type:', 'bars', lineTypeRadio);%%00010%%00010%%00009%%00009%%00009var lineThicknessSpin = knimeService.createMenuNumberField(&quot;lineThickness&quot;, _value.options.lThickness, 0.1, 100, 0.1, function(){%%00010%%00009%%00009%%00009%%00009_value.options.lThickness = Number(this.value);%%00010%%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).attr(&quot;stroke-width&quot;, this.value);%%00010%%00009%%00009%%00009}, true);%%00010%%00009%%00009%%00009knimeService.addMenuItem('Line thickness:', 'minus', lineThicknessSpin);%%00010%%00009%%00009}%%00010            %%00010         // temporarily use controlContainer to solve th resizing problem with ySelect%%00010            if (_representation.options.enableColumnSelection){%%00010%%00009            var layoutContainer = &quot;layoutContainer&quot;;%%00010%%00009            var containerID = &quot;plotContainer&quot;;%%00010%%00009%%00009    %%00009var controlContainer = d3.select(&quot;#&quot;+layoutContainer).insert(&quot;table&quot;, &quot;#&quot; + containerID + &quot; ~ *&quot;)%%00010%%00009%%00009    %%00009.attr(&quot;id&quot;, &quot;plotControls&quot;)%%00010%%00009%%00009    %%00009.style(&quot;width&quot;, &quot;100%&quot;)%%00010%%00009%%00009    %%00009.style(&quot;padding&quot;, &quot;10px&quot;)%%00010%%00009%%00009    %%00009.style(&quot;margin&quot;, &quot;0 auto&quot;)%%00010%%00009%%00009    %%00009.style(&quot;box-sizing&quot;, &quot;border-box&quot;)%%00010%%00009%%00009    %%00009.style(&quot;border-spacing&quot;, 0)%%00010%%00009%%00009    %%00009.style(&quot;border-collapse&quot;, &quot;collapse&quot;);%%00009%%00009%%00009   %%00009%%00010%%00009%%00010%%00009%%00009    %%00009var columnChangeContainer = controlContainer.append(&quot;tr&quot;);%%00009%%00009   %%00009%%00010%%00009%%00009    %%00009var ySelect = new twinlistMultipleSelections();%%00009%%00010%%00009%%00009    %%00009var ySelectComponent = ySelect.getComponent().get(0);%%00010%%00009%%00009    %%00009columnChangeContainer.append(&quot;td&quot;).attr(&quot;colspan&quot;, &quot;3&quot;).node().appendChild(ySelectComponent);%%00010%%00009%%00009    %%00009ySelect.setChoices(filterColumns(_value.options.columns));%%00010%%00009%%00009    %%00009ySelect.setSelections(filterColumns(_value.options.columns));%%00010%%00009%%00009    %%00009ySelect.addValueChangedListener(function() {%%00010%%00009%%00009    %%00009%%00009_value.options.columns = ySelect.getSelections();%%00010%%00009%%00009    %%00009%%00009saveSettingsToValue();%%00010%%00009%%00009    %%00009%%00009_data = createData(_representation);%%00010%%00009%%00009    %%00009%%00009drawChart();%%00010%%00009%%00009    %%00009%%00009applyFilter();%%00010%%00009%%00009    %%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing){%%00010%%00009%%00009            %%00009drawSavedBrushes();%%00010%%00009%%00009            }%%00010%%00009%%00009            // select saved (selected) rows%%00010%%00009%%00009            if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; !_value.options.selections){%%00010%%00009%%00009            %%00009selectRows();%%00010%%00009%%00009            }%%00010%%00009%%00009            if (_representation.options.enableSelection &amp;&amp; _value.options.selectedrows){%%00010%%00009%%00009            %%00009selectRows();%%00010%%00009%%00009            }%%00010%%00009%%00009    %%00009});%%00010%%00009%%00009    %%00009%%00010%%00009%%00009    %%00009knimeService.addMenuItem('Axes:', 'long-arrow-up', ySelectComponent);%%00010%%00009%%00009    %%00009ySelectComponent.style.margin = '0';%%00010%%00009%%00009    %%00009ySelectComponent.style.outlineOffset = '-3px';%%00010%%00009%%00009    %%00009ySelectComponent.style.width = '';%%00010%%00009%%00009    %%00009ySelectComponent.style.height = '';%%00010%%00009%%00009    %%00009controlContainer.remove();%%00010%%00009        }%%00010        %%00010        if ((_representation.options.enableTitleEdit || _representation.options.enableSubtitleEdit) %%00010        %%00009%%00009|| (_representation.options.enableMValuesHandling &amp;&amp; containMissing()) || _representation.options.enableLineChange %%00010        %%00009%%00009&amp;&amp; knimeService.isInteractivityAvailable() &amp;&amp; _representation.options.enableSelection) {%%00010        %%00009knimeService.addMenuDivider();%%00010        }%%00010        %%00010        if (knimeService.isInteractivityAvailable()) {%%00010%%00009%%00009%%00009if (_representation.options.enableSelection) {%%00010%%00009%%00009%%00009%%00009var pubSelIcon = knimeService.createStackedIcon('check-square-o', 'angle-right', 'faded left sm', 'right bold');%%00010%%00009%%00009%%00009%%00009var pubSelCheckbox = knimeService.createMenuCheckbox('publishSelectionCheckbox', _value.options.publishSelection, function() {%%00010%%00009%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.publishSelection = true;%%00010%%00009%%00009%%00009%%00009%%00009%%00009publishCurrentSelection();%%00010%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.publishSelection = false;%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Publish selection', pubSelIcon, pubSelCheckbox);%%00010%%00009%%00009%%00009%%00009var subSelIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right', 'faded right sm', 'left bold');%%00010%%00009%%00009%%00009%%00009var subSelCheckbox = knimeService.createMenuCheckbox('subscribeSelectionCheckbox', _value.options.subscribeSelection, function() {%%00010%%00009%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009knimeService.subscribeToSelection(_representation.inObjects[0].id, selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009knimeService.unsubscribeSelection(_representation.inObjects[0].id, selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009knimeService.addMenuItem('Subscribe to selection', subSelIcon, subSelCheckbox);%%00010%%00009%%00009%%00009}%%00010        }%%00010        %%00010        if (filterIds) {//.length &gt; 0%%00010%%00009%%00009%%00009if (_representation.enableSelection) {%%00010%%00009%%00009%%00009%%00009knimeService.addMenuDivider();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009var subFilIcon = knimeService.createStackedIcon('filter', 'angle-double-right', 'faded right sm', 'left bold');%%00010%%00009%%00009%%00009var subFilCheckbox = knimeService.createMenuCheckbox('subscribeFilterCheckbox', _value.options.subscribeFilter, function() {%%00010%%00009%%00009%%00009%%00009if (this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009knimeService.subscribeToFilter(_representation.inObjects[0].id, filterChanged, filterIds);%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009knimeService.unsubscribeFilter(_representation.inObjects[0].id, filterChanged);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009knimeService.addMenuItem('Subscribe to filter', subFilIcon, subFilCheckbox);%%00010%%00009%%00009}%%00010    };%%00010    %%00010    function filterChanged(data){%%00010    %%00009currentFilter = data;%%00010    %%00009applyFilter(true);%%00010    };%%00010    %%00010    function applyFilter(clear){%%00010    %%00009if (currentFilter){%%00010    %%00009%%00009d3.selectAll(&quot;.row&quot;).each(function(d){%%00010    %%00009%%00009%%00009d3.select(this).classed(&quot;filtered&quot;, !isRowIncludedInFilter(d.id));%%00010    %%00009%%00009});%%00010    %%00009%%00009if (clear) {%%00010    %%00009%%00009%%00009clearBrushes();%%00010    %%00009%%00009}%%00010    %%00009};%%00010    };%%00010    %%00010    %%00010    publishCurrentSelection = function() {%%00010%%00009%%00009if (knimeService &amp;&amp; knimeService.isInteractivityAvailable() &amp;&amp; _value.options.publishSelection) {%%00010%%00009%%00009%%00009var selArray = [];%%00010%%00009    %%00009// set to true selected%%00010%%00009    %%00009d3.selectAll(&quot;.row&quot;).filter(&quot;.selected&quot;).each(function (row){%%00010%%00009    %%00009%%00009selArray.push(row.id);%%00010%%00009    %%00009});%%00010%%00009%%00009%%00009knimeService.setSelectedRows(_representation.inObjects[0].id, selArray, selectionChanged);%%00010%%00009%%00009}%%00010%%00009%%00009checkClearSelectionButton();%%00010%%00009};%%00010%%00009%%00010%%00009function checkClearSelectionButton(){%%00010%%00009%%00009var button = d3.select(&quot;#clearSelectionButton&quot;);%%00010%%00009%%00009if (!button.empty()){%%00010%%00009%%00009%%00009button.classed(&quot;inactive&quot;, function(){return d3.select(&quot;.row.selected&quot;).empty()});%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009selectionChanged = function(data) {%%00010%%00009%%00009clearBrushes();%%00010%%00009%%00009if (data.changeSet) {%%00010%%00009%%00009%%00009if (data.changeSet.removed) {%%00010%%00009%%00009%%00009%%00009for (var i = 0; i &lt; data.changeSet.removed.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009var removedId = data.changeSet.removed[i];%%00010%%00009%%00009%%00009%%00009%%00009var row = d3.select(&quot;#&quot;+ removedId);%%00010%%00009%%00009%%00009%%00009%%00009if (!row.empty() &amp;&amp; !row.classed(&quot;filtered&quot;)) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009row.classed({&quot;unselected&quot;: true, &quot;selected&quot;: false, &quot;knime-selected&quot;: false});%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009if (d3.selectAll(&quot;.selected&quot;).empty()){%%00010    %%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed(&quot;unselected&quot;, false);%%00010    %%00009%%00009%%00009%%00009rowsSelected = false;%%00010    %%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (data.changeSet.added) {%%00010%%00009%%00009%%00009%%00009for (var i = 0; i &lt; data.changeSet.added.length; i++) {%%00010%%00009%%00009%%00009%%00009%%00009var addedId = data.changeSet.added[i];%%00010%%00009%%00009%%00009%%00009%%00009var row = d3.select(&quot;#&quot;+ addedId);%%00010%%00009%%00009%%00009%%00009%%00009if (!row.empty() &amp;&amp; !row.classed(&quot;filtered&quot;)) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (d3.selectAll(&quot;.selected&quot;).empty()) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed(&quot;unselected&quot;, true);%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009row.classed({&quot;selected&quot;: true, &quot;knime-selected&quot;: true, &quot;unselected&quot;: false});%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009saveSelectedRows();%%00010%%00009%%00009} %%00010%%00009%%00009checkClearSelectionButton();%%00010%%00009};%%00010%%00010    function drawChart() {%%00010        var cw = Math.max(MIN_WIDTH, _representation.options.svg.width);%%00010        var ch = Math.max(MIN_HEIGHT, _representation.options.svg.height);%%00010        var chartWidth = cw + &quot;px;&quot;%%00010        var chartHeight = ch + &quot;px&quot;;%%00010%%00010        if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010            chartWidth = &quot;100%&quot;;%%00010            chartHeight = &quot;100%&quot;;%%00010        }%%00010%%00010        var div = d3.select(&quot;#svgContainer&quot;)%%00010            .style(&quot;height&quot;, chartHeight)%%00010            .style(&quot;width&quot;, chartWidth);%%00010%%00010        var d3svg = d3.select(&quot;svg&quot;).attr({width : cw, height : ch}).style({width : chartWidth, height : chartHeight});%%00010        %%00010        var mTop = (_value.options.subtitle || _value.options.title) ? 80 : 30;%%00010%%00010        colors = _representation.options.catCol ?%%00010        %%00009%%00009%%00009%%00009d3.scale.category10().domain(_data.domains[_representation.options.catCol].values())%%00010        %%00009%%00009%%00009%%00009: null;%%00010%%00010        var maxLength = 0;%%00010        %%00010        d3.select(&quot;.legend&quot;).remove();%%00010        if (_representation.options.catCol &amp;&amp; _representation.options.showLegend &amp;&amp; !_representation.options.useColors) {%%00010%%00009        var legendG = d3svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;legend knime-legend&quot;);%%00010%%00009        var maxLength = 0;%%00010%%00009        var catValues = _data.domains[_representation.options.catCol].values();%%00010%%00009        for (var i = 0; i &lt; catValues.length; i++) {%%00010%%00009        %%00009var cat = catValues[i];%%00010%%00009%%00009%%00009%%00009var txt = legendG.append(&quot;text&quot;)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-legend-label&quot;)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;x&quot;, 20)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;y&quot;, i * 23)%%00010%%00009%%00009%%00009%%00009%%00009.text(cat);%%00010%%00009        %%00009maxLength = Math.max(maxLength, txt.node().getComputedTextLength());%%00010%%00009%%00009%%00009%%00009legendG.append(&quot;circle&quot;)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-legend-symbol&quot;)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;cx&quot;, 5)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;cy&quot;, i * 23 - 4)%%00010%%00009%%00009%%00009%%00009%%00009.attr(&quot;r&quot;, 5)%%00010%%00009        %%00009%%00009.attr(&quot;fill&quot;, colors(cat));%%00010%%00009        }%%00010%%00009        maxLength += 35;%%00010%%00009        legendG.attr(&quot;transform&quot;, &quot;translate(&quot; + (parseInt(d3svg.style('width')) - maxLength) + &quot;,&quot; + (mTop + 20) + &quot;)&quot;);%%00010        }%%00010        %%00010        var bottomMargin;%%00010        _value.options.mValues == MISSING_VALUE_MODE &amp;&amp; containMissing() ? bottomMargin = 60 : bottomMargin = 30;%%00010%%00010        var margin = {top : mTop, left : 40, bottom : bottomMargin, right : 10 + maxLength};%%00010%%00010        plotG = d3svg.select(&quot;#plotG&quot;)%%00010                .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);%%00010%%00010        w = Math.max(50, parseInt(d3svg.style('width')) - margin.left - margin.right);%%00010        h = Math.max(50, parseInt(d3svg.style('height')) - margin.top - margin.bottom);%%00010%%00010        plotG.select(&quot;#da&quot;).attr({y : -10, width : w, height : h + 45});%%00010        d3svg.select(&quot;#bgr&quot;).attr({width : w + margin.left + margin.right, height : h + margin.top + margin.bottom});%%00010%%00010        scaleCols = d3.scale.ordinal().domain(_data.colNames).rangePoints([0, w], 0.5);%%00010%%00010        scales = {};%%00010        %%00010        for (var c = 0; c &lt; _data.colNames.length; c++) {%%00010        %%00009var colName = _data.colNames[c];%%00010        %%00009var scale;%%00010        %%00009if (_data.colTypes[colName] === &quot;number&quot; || _data.colTypes[colName] === &quot;dateTime&quot;) {%%00010        %%00009%%00009scale = d3.scale.linear().range([h, 0]).domain(_data.minmax[colName]).nice();%%00010        %%00009} else {%%00010        %%00009%%00009scale = d3.scale.ordinal().domain(_data.domains[colName].values()).rangePoints([h, 0], 1.0);%%00010        %%00009}%%00010        %%00009scales[colName] = scale;%%00010        } %%00010%%00010        mzd = _data.objects;%%00010        %%00010        plotG.selectAll(&quot;text, path, .axis, .xAxis&quot;).remove();%%00010        %%00010     // create an additional axis for the missing values selection%%00010       if (_representation.options.enableMValuesHandling %%00010        %%00009%%00009&amp;&amp; _representation.options.enableViewControls %%00010        %%00009%%00009&amp;&amp; _representation.runningInView) {%%00010        %%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; _representation.options.enableSelection %%00010        %%00009%%00009%%00009&amp;&amp; _representation.options.enableBrushing &amp;&amp; containMissing()){%%00010        %%00009%%00009createXAxis();%%00010%%00009        };%%00010        };   %%00010        %%00010        var g;%%00010        g = plotG.selectAll(&quot;g.axis&quot;)%%00010        .data(_data.colNames, function(d) { return d; })%%00010        .enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;axis knime-axis knime-y&quot;).attr(&quot;id&quot;, function(d){return d;})%%00010        .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + scaleCols(d) + &quot;,0)&quot;; })%%00010    %%00009.each(function(d) {%%00010        %%00009var scale = scales[d];%%00010        %%00009var axis = d3.svg.axis()%%00010            .scale(scale).orient(&quot;left&quot;);       %%00009%%00010        %%00009d3.select(this).call(axis);%%00010        })%%00010        .each(function(d, i) {%%00010%%00009        %%00009d3.select(this).append(&quot;text&quot;).datum(_data.colNames[i])%%00010%%00009        %%00009.attr(&quot;class&quot;, &quot;label knime-axis-label&quot;).attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009        %%00009.attr(&quot;transform&quot;, function(d) { return &quot;translate(0,&quot; + (-15) + &quot;)&quot;; })// h + 40%%00010%%00009        %%00009.attr(&quot;text-anchor&quot;, &quot;middle&quot;)%%00010%%00009        %%00009.text(function(d) { return d; });%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00010%%00009%%00009d3.selectAll(&quot;.domain&quot;)%%00010            .classed(&quot;knime-axis-line&quot;, true);%%00010%%00009%%00009var ticks = d3.selectAll(&quot;.tick&quot;)%%00010            .classed(&quot;knime-tick&quot;, true);%%00010        ticks.selectAll(&quot;line&quot;)%%00010            .classed(&quot;knime-tick-line&quot;, true);%%00010        ticks.selectAll(&quot;text&quot;)%%00010            .classed(&quot;knime-tick-label&quot;, true);%%00010        %%00010        if (_representation.options.enableAxesSwapping){%%00010%%00009        g.call(d3.behavior.drag()%%00010%%00009        %%00009%%00009.origin(function(d) { %%00010%%00009        %%00009%%00009%%00009return {x: scaleCols(d)}; %%00010%%00009        %%00009%%00009%%00009})%%00010%%00009        %%00009%%00009.on(&quot;dragstart&quot;, function(d) {%%00010%%00009        %%00009%%00009%%00009dragging[d] = scaleCols(d);%%00010%%00009        %%00009%%00009%%00009draggingNow = true;%%00010%%00009        %%00009%%00009 })%%00010%%00009        .on(&quot;drag&quot;, function(d) {%%00010%%00009        %%00009if (draggingNow) {%%00010%%00009%%00009          dragging[d] = Math.min(w, Math.max(0, d3.event.x));%%00010%%00009%%00009          _data.colNames.sort(function(a, b) { return position(a) - position(b); });%%00010%%00009%%00009          scaleCols.domain(_data.colNames);%%00010%%00009%%00009          d3.selectAll(&quot;.row&quot;).attr(&quot;d&quot;, path);%%00010%%00009%%00009          g.attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + position(d) + &quot;,0)&quot;; });%%00010%%00009        %%00009};%%00010%%00009        })%%00010%%00009        .on(&quot;dragend&quot;, function(d) {%%00009%%00010%%00009          delete dragging[d];%%00010%%00009          draggingNow = false;%%00010%%00009          transition(d3.select(this)).attr(&quot;transform&quot;, &quot;translate(&quot; + scaleCols(d) + &quot;)&quot;);%%00010%%00009          transition(d3.selectAll(&quot;.row&quot;)).attr(&quot;d&quot;, path); %%00010%%00009          if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; containMissing()){%%00010%%00009        %%00009  if (!xBrush.empty()) {%%00010%%00009%%00009        %%00009%%00009xBrush.extent(xBrush.extent());%%00010%%00009%%00009        %%00009%%00009d3.select(&quot;.xBrush&quot;).call(xBrush);%%00010%%00009%%00009        %%00009%%00009brush();%%00010%%00009        %%00009  }%%00010%%00009        %%00009};%%00010%%00009        }));%%00010%%00009        d3.selectAll(&quot;.label&quot;).style(&quot;cursor&quot;, &quot;move&quot;);%%00010%%00009        if (_data.colNames.length == sortedCols.length){%%00010%%00009        %%00009sortedCols = _data.colNames;%%00010%%00009        };%%00010%%00009        %%00010        };%%00010        d3.selectAll(&quot;.axis path&quot;).attr(&quot;stroke-width&quot;, 1).attr(&quot;stroke&quot;, &quot;black&quot;).attr(&quot;fill&quot;, &quot;none&quot;);%%00010        %%00010        // brush - rows selection%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing) {%%00010        g.append(&quot;g&quot;)%%00010%%00009      .attr(&quot;class&quot;, &quot;brush&quot;)%%00010%%00009      .each(function(d,i) { %%00010%%00009    %%00009  d3.select(this).call(brushes[d] = d3.svg.brush().y(scales[d]).on(&quot;brush&quot;, brush).on(&quot;brushend&quot;, publishCurrentSelection).on(&quot;brushstart&quot;, brushstart)); %%00010%%00009    %%00009  d3.select(this).attr(&quot;id&quot;, i);%%00010%%00009    %%00009  })%%00010%%00009      .selectAll(&quot;rect&quot;)%%00010%%00009      .attr(&quot;x&quot;, -8)%%00010%%00009      .attr(&quot;width&quot;, 16)%%00010%%00009      .attr(&quot;fill-opacity&quot;, &quot;0.2&quot;)%%00010%%00009      .attr(&quot;stroke&quot;, &quot;#fff&quot;)%%00010%%00009      .attr(&quot;shape-rendering&quot;,&quot;crispEdges&quot;);%%00010        };%%00010%%00010        function transition(g) {%%00010    %%00009  return g.transition().duration(500);%%00010    %%00009};%%00010        %%00010        function path(d) {%%00010        %%00009return getLine(d);%%00010        };%%00010        %%00010        //representation.options.enableViewControls%%00010%%00009%%00009//&amp;&amp; _representation.runningInView_%%00010%%00010        if (_representation.options.enableMValuesHandling &amp;&amp; containMissing()) {%%00010        %%00009bottomBar = (_value.options.mValues == MISSING_VALUE_MODE);%%00010        }%%00010%%00010%%00009    if (bottomBar) {%%00010        %%00009plotG.append(&quot;text&quot;)%%00010%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;missingVtitle&quot;)%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;knime-label&quot;)%%00010            .attr(&quot;x&quot;, -30)%%00010            .attr(&quot;y&quot;, h + 38)%%00010            .text(&quot;Miss.values&quot;);%%00010%%00009    };%%00010%%00009    %%00010%%00009    line = d3.svg.line()%%00010        .x(function(d, i) { %%00010        %%00009return position(_data.colNames[i]);})%%00010        .y(function(d, i) {%%00010        %%00009if (bottomBar &amp;&amp; d === null) {%%00010%%00009        %%00009return h + 40;%%00010        %%00009}else if (d === null){%%00010        %%00009%%00009return h;%%00010        %%00009}%%00010        %%00009return scales[_data.colNames[i]](d);%%00010        });%%00010        %%00010        // Skipping missing cells%%00010        if (_representation.options.enableMValuesHandling %%00010        %%00009%%00009&amp;&amp; _representation.options.enableViewControls %%00010        %%00009%%00009&amp;&amp; _representation.runningInView) {%%00010        %%00009if (_value.options.mValues == &quot;Skip\u00A0missing\u00A0values&quot; ){%%00010%%00009        %%00009line.defined(function(d) {%%00010%%00009                %%00009return d != null;%%00010%%00009            });%%00010%%00009        };%%00010        };%%00010        %%00010        if (_representation.options.enableMValuesHandling %%00010        %%00009%%00009&amp;&amp; _representation.options.enableViewControls %%00010        %%00009%%00009&amp;&amp; _representation.runningInView) {%%00010        %%00009if (_value.options.mValues == &quot;Skip\u00A0rows\u00A0with\u00A0missing\u00A0values&quot;){%%00010%%00009        %%00009mzd = mzd.filter(function(d) {%%00010%%00009        %%00009%%00009return !d.containsMissing;%%00010%%00009        %%00009});%%00010%%00009        };%%00010        };   %%00010        %%00010        // Curved lines%%00010        if (_representation.options.enableLineChange %%00010        %%00009%%00009&amp;&amp; _representation.options.enableViewControls %%00010        %%00009%%00009&amp;&amp; _representation.runningInView) {%%00010        %%00009if (_value.options.lType == &quot;Curved&quot;){%%00010                line.interpolate(&quot;monotone&quot;);%%00010        %%00009};%%00010        };%%00010        %%00010        plotG.selectAll(&quot;path.row&quot;).each(function(d, i) {%%00010        %%00009d3.select(this).datum(mzd[i]);%%00010        });%%00010%%00010        drawElements(mzd); %%00010        %%00010        if (_representation.options.svg.fullscreen) {%%00010            var win = document.defaultView || document.parentWindow;%%00010            win.onresize = resize;%%00010        }; %%00010    };%%00010    %%00010    var getLine = function(dp) {%%00010    %%00009return line(_data.colNames.map(function(col) {%%00010    %%00009%%00009return dp[col];%%00010    %%00009}));%%00010    };%%00010    %%00010    function key(d) {%%00010    %%00009  return d.id;%%00010    };%%00010    %%00010    function drawElements(data){%%00010     var rows = plotG.selectAll(&quot;path.row&quot;).data(data).enter()%%00010            .insert(&quot;path&quot;, &quot;.axis&quot;).attr(&quot;class&quot;, &quot;row&quot;)%%00010            .attr(&quot;id&quot;, function(d) { return d.id; })%%00010            .attr(&quot;d&quot;, getLine )%%00010            .attr(&quot;stroke&quot;, function(d) {%%00010            %%00009if (_representation.options.useColors) {%%00010            %%00009%%00009return d.color;%%00010            %%00009} else if (_representation.options.catCol) {%%00010            %%00009%%00009return colors(d[_representation.options.catCol]);%%00010            %%00009} else {%%00010            %%00009%%00009return &quot;black&quot;;%%00010            %%00009}%%00010            })%%00010            .attr(&quot;stroke-width&quot;, function() {%%00010            %%00009if (_representation.options.enableLineChange) {%%00010            %%00009%%00009return _value.options.lThickness;%%00010            %%00009} else {%%00010            %%00009%%00009return 1;%%00010            %%00009}%%00010            })%%00010            .attr(&quot;stroke-opacity&quot;, 0.9) %%00010            .attr(&quot;fill&quot;, &quot;none&quot;);%%00010     %%00010     if (_representation.options.enableSelection){%%00010    %%00009 rows.on(&quot;click&quot;, function(d,i){%%00010        %%00009%%00009if( !d3.event.shiftKey) {%%00010%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;.selected&quot;).classed({&quot;selected&quot;: false, &quot;knime-selected&quot;: false});%%00010        %%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed(&quot;unselected&quot;, true);%%00010        %%00009%%00009%%00009d3.select(this).classed({&quot;selected&quot;: true, &quot;knime-selected&quot;: true, &quot;unselected&quot;: false});%%00010        %%00009%%00009%%00009rowsSelected = true;%%00010        %%00009%%00009%%00009if (knimeService &amp;&amp; knimeService.isInteractivityAvailable() &amp;&amp; _value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009knimeService.setSelectedRows(_representation.inObjects[0].id, [this.getAttribute(&quot;id&quot;)], selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010        %%00009%%00009} else {%%00010        %%00009%%00009%%00009var selected = d3.select(this).classed(&quot;selected&quot;);%%00010        %%00009%%00009%%00009d3.select(this).classed({&quot;selected&quot;: !selected, &quot;knime-selected&quot;: !selected, &quot;unselected&quot;: selected});%%00010        %%00009%%00009%%00009if (selected &amp;&amp; d3.selectAll(&quot;.selected&quot;).empty()){%%00010        %%00009%%00009%%00009%%00009rowsSelected = false;%%00010        %%00009%%00009%%00009}%%00010        %%00009%%00009%%00009if (!selected &amp;&amp; d3.selectAll(&quot;.selected&quot;).empty()){%%00010        %%00009%%00009%%00009%%00009rowsSelected = false;%%00010        %%00009%%00009%%00009}%%00010        %%00009%%00009%%00009if (!selected &amp;&amp; !d3.selectAll(&quot;.selected&quot;).empty()){%%00010        %%00009%%00009%%00009%%00009rowsSelected = true;%%00010        %%00009%%00009%%00009}%%00010        %%00009%%00009%%00009if (knimeService &amp;&amp; knimeService.isInteractivityAvailable() &amp;&amp; _value.options.publishSelection) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (selected){%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009knimeService.removeRowsFromSelection(_representation.inObjects[0].id, [this.getAttribute(&quot;id&quot;)], selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009knimeService.addRowsToSelection(_representation.inObjects[0].id, [this.getAttribute(&quot;id&quot;)], selectionChanged);%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009}%%00010        %%00009%%00009%%00009if (d3.selectAll(&quot;.selected&quot;).empty()){%%00010        %%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed(&quot;unselected&quot;, false);%%00010        %%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).datum(function(d){%%00010        %%00009%%00009%%00009%%00009%%00009delete d[&quot;selected&quot;];%%00010        %%00009%%00009%%00009%%00009%%00009return d;%%00010        %%00009%%00009%%00009%%00009})%%00010        %%00009%%00009%%00009%%00009rowsSelected = false;%%00010        %%00009%%00009%%00009}%%00010        %%00009%%00009};%%00010        %%00009%%00009clearBrushes();%%00010        %%00009%%00009checkClearSelectionButton();%%00010        %%00009%%00009d3.event.stopPropagation();%%00010         }).on(&quot;mouseover&quot;, function(d,i) {%%00010    %%00009%%00009 var selected = d3.select(this).classed(&quot;selected&quot;); // returns true if selected%%00010    %%00009%%00009 selected &amp;= d3.event.shiftKey;%%00010    %%00009%%00009 d3.select(this).classed({&quot;addSelection&quot;: !selected, &quot;removeSelection&quot;: selected}); %%00010    %%00009 }).on(&quot;mouseout&quot;, function(d, i) {%%00010    %%00009%%00009 d3.selectAll(&quot;.rows&quot;).classed({&quot;addSelection&quot;: false, &quot;removeSelection&quot;: false});%%00010    %%00009 });%%00010     };%%00010     %%00010     //select previously selected rows%%00010     var selected = false;%%00010     for (i = 0; i &lt; data.length; i++ ){%%00010    %%00009 selected = selected || (data[i].selected == true);%%00010     };%%00010     if (selected){%%00010    %%00009 rows.classed( &quot;selected&quot;, function(d){%%00010    %%00009%%00009 return d.selected;%%00010%%00009%%00009 });%%00010%%00009%%00009 rows.classed( &quot;knime-selected&quot;, function(d){%%00010%%00009%%00009%%00009return d.selected;%%00010%%00009%%00009});%%00010    %%00009 %%00010    %%00009 rows.classed( &quot;unselected&quot;, function(d){%%00010    %%00009%%00009 return d.selected == false;%%00010    %%00009 });%%00010     %%00009};%%00010     %%00009%%00010     // render rows with a delay%%00009%%00010     /*d3.selectAll(&quot;.row&quot;).style(&quot;visibility&quot;, &quot;hidden&quot;);%%00009%%00010     d3.selectAll(&quot;.row&quot;).transition().style(&quot;visibility&quot;, &quot;visible&quot;).delay(function(d,i){%%00010    %%00009 arraySize = d3.selectAll(&quot;.row&quot;).length;%%00010    %%00009 return arraySize / i * 5000;%%00010     });*/%%00010     %%00010    };%%00010%%00010    function position(d) {%%00010  %%00009  var v = dragging[d];%%00010  %%00009  return v == null ? scaleCols(d) : v;%%00010  %%00009};%%00010%%00010    input.getSVG = function() {%%00010    %%00009var svgElement = d3.select(&quot;svg&quot;)[0][0];%%00010%%00009%%00009knimeService.inlineSvgStyles(svgElement);%%00010%%00009%%00009// Return the SVG as a string.%%00010%%00009%%00009return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010    %%00010    function createXAxis(){%%00010%%00009    xAxis = d3.svg.axis().scale(scaleCols).tickSize(5).orient(&quot;bottom&quot;);%%00010%%00009    gx = plotG.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;xAxis knime-axis knime-x&quot;)%%00010%%00009    .attr(&quot;transform&quot;, function(d) { return &quot;translate(0,&quot; + (h + 40%%00009) + &quot;)&quot;; })%%00010%%00009    .attr(&quot;stroke&quot;, &quot;transparent&quot;)%%00010%%00009    .call(xAxis);        %%00010%%00009%%00010%%00009    gx.append(&quot;g&quot;)%%00010%%00009      .attr(&quot;class&quot;, &quot;xBrush&quot;)%%00010%%00009      .call(xBrush = d3.svg.brush().x(scaleCols).on(&quot;brush&quot;, brush).on(&quot;brushend&quot;, publishCurrentSelection).on(&quot;brushstart&quot;, function(){rowsSelected = false;}))%%00010%%00009      .selectAll(&quot;rect&quot;)%%00010%%00009      .attr(&quot;y&quot;, -8)%%00010%%00009      .attr(&quot;height&quot;, 16)%%00010%%00009      .attr(&quot;fill-opacity&quot;, &quot;0.2&quot;)%%00010%%00009      .attr(&quot;stroke&quot;, &quot;#fff&quot;)%%00010%%00009      .attr(&quot;shape-rendering&quot;,&quot;crispEdges&quot;);%%00010    };%%00010    %%00010    function clearBrushes(){%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes){%%00010%%00009%%00009%%00009d3.selectAll(&quot;.brush&quot;).each(function(d,i){%%00010%%00009%%00009%%00009%%00009d3.select(this).call(brushes[_data.colNames[i]].clear());%%00010%%00009%%00009%%00009%%00009if (extents){%%00010%%00009%%00009%%00009%%00009%%00009if (d3.entries(extents).length &gt; 0){%%00010%%00009%%00009%%00009%%00009%%00009%%00009extents = {};%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009});%%00010%%00010%%00009%%00009%%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010%%00009%%00009%%00009%%00009%%00009&amp;&amp; _value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xBrush &amp;&amp; containMissing()){%%00010%%00009%%00009%%00009%%00009d3.select(&quot;.xBrush&quot;).call(xBrush.clear());%%00010%%00009%%00009%%00009%%00009if (xExtent){%%00010%%00009%%00009%%00009%%00009xExtent = [];%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009};%%00010%%00009%%00009};%%00010    }%%00010    %%00010    function brush(axis, start, end, par){%%00010    %%00009par = par || false;%%00010    %%00009var data = _data;%%00010    %%00009extents = _data.colNames.map(function(p) { return brushes[p].extent(); });%%00010    %%00009var missingSelected = xBrush &amp;&amp; !xBrush.empty() &amp;&amp; _value.options.mValues == MISSING_VALUE_MODE;%%00010    %%00009if (xBrush){%%00010    %%00009%%00009var xExtent = xBrush.extent();%%00010    %%00009}%%00010    %%00009var nothingSelected = true;%%00010    %%00009for (var i = 0; i &lt; _data.colNames.length; i++) {%%00010    %%00009%%00009nothingSelected &amp;= brushes[_data.colNames[i]].empty();%%00010    %%00009};%%00010    %%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xBrush &amp;&amp; containMissing()){%%00010    %%00009%%00009nothingSelected &amp;= xBrush.empty();%%00010    %%00009}%%00010    %%00009if (nothingSelected) {%%00010    %%00009%%00009d3.selectAll(&quot;.row&quot;).classed({&quot;selected&quot;: false, &quot;knime-selected&quot;: false, &quot;unselected&quot;: false});%%00010    %%00009%%00009return;%%00010    %%00009};%%00010    %%00009d3.selectAll(&quot;.row&quot;).each(function(dp) {%%00010    %%00009%%00009var row = d3.select(this);%%00010    %%00009%%00009if (row.classed('filtered')) {%%00010    %%00009%%00009%%00009return;%%00010    %%00009%%00009};%%00010    %%00009%%00009var selected = _data.colNames.every(function(p,i){%%00010    %%00009%%00009%%00009var extentEmpty = brushes[p].empty();%%00010    %%00009%%00009%%00009if (xBrush){%%00010%%00009    %%00009%%00009%%00009if (extentEmpty &amp;&amp; !missingSelected){%%00010%%00009    %%00009%%00009%%00009%%00009return true;%%00010%%00009    %%00009%%00009%%00009};%%00010    %%00009%%00009%%00009} else {%%00010    %%00009%%00009%%00009%%00009if (extentEmpty){%%00010    %%00009%%00009%%00009%%00009return true;%%00010    %%00009%%00009%%00009%%00009}%%00010    %%00009%%00009%%00009}%%00010    %%00009%%00009%%00009var missValueSelected = false;%%00010    %%00009%%00009%%00009if (missingSelected){%%00010    %%00009%%00009%%00009%%00009var xScale = scaleCols(_data.colNames[i]);%%00010    %%00009%%00009%%00009%%00009if (par){%%00010    %%00009%%00009%%00009%%00009%%00009missValueSelected = xBrushScale(xExtent[0]) &lt;= xScale &amp;&amp; xScale &lt;= xBrushScale(xExtent[1]);%%00010    %%00009%%00009%%00009%%00009} else {%%00010    %%00009%%00009%%00009%%00009%%00009missValueSelected = xExtent[0] &lt;= xScale &amp;&amp; xScale &lt;= xExtent[1];%%00010    %%00009%%00009%%00009%%00009};%%00010    %%00009%%00009%%00009%%00009if (extentEmpty &amp;&amp; !missValueSelected){%%00010    %%00009%%00009%%00009%%00009%%00009return true;%%00010    %%00009%%00009%%00009%%00009};%%00010    %%00009%%00009%%00009};%%00010    %%00009%%00009%%00009if (dp[p] == null){%%00010    %%00009%%00009%%00009%%00009return missValueSelected;%%00010    %%00009%%00009%%00009};%%00010    %%00009%%00009%%00009if (extentEmpty){%%00010    %%00009%%00009%%00009%%00009return false;%%00010    %%00009%%00009%%00009};%%00010    %%00009%%00009%%00009if (_data.colTypes[p] == &quot;string&quot;){%%00010    %%00009%%00009%%00009%%00009if (par){%%00010    %%00009%%00009%%00009%%00009%%00009return ordinalScale(extents[i][0]) &lt;= scales[p](dp[p]) &amp;&amp; scales[p](dp[p]) &lt;= ordinalScale(extents[i][1]);%%00010    %%00009%%00009%%00009%%00009} else {%%00010    %%00009%%00009%%00009%%00009%%00009return extents[i][0] &lt;= scales[p](dp[p]) &amp;&amp; scales[p](dp[p]) &lt;= extents[i][1];%%00010    %%00009%%00009%%00009%%00009}%%00010    %%00009    %%00009} else if (_data.colTypes[p] == &quot;number&quot;) {%%00010    %%00009    %%00009%%00009return extents[i][0] &lt;= dp[p] &amp;&amp; dp[p] &lt;= extents[i][1];%%00010    %%00009    %%00009};%%00010    %%00009%%00009});%%00010    %%00009%%00009row.classed({&quot;selected&quot;: selected, &quot;knime-selected&quot;: selected, &quot;unselected&quot;: !selected});%%00010    %%00009});%%00010    };%%00010    %%00010    function getExtents(){%%00010    %%00009extents = {};%%00010    %%00009d3.entries(brushes).forEach(function(brush) {%%00010    %%00009%%00009if(!brush.value.empty()) {%%00010    %%00009%%00009%%00009extents[brush.key] = brush.value.extent();%%00010    %%00009%%00009};%%00010    %%00009});%%00010    %%00009xExtent = [];%%00010    %%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xBrush &amp;&amp; containMissing()){%%00010    %%00009%%00009if (!xBrush.empty()){%%00010    %%00009%%00009%%00009xExtent = xBrush.extent();%%00010    %%00009%%00009};%%00010    %%00009};%%00010    };%%00010    %%00010    function drawSavedBrushes(){%%00010    %%00009if (_value.options.selections) {%%00010    %%00009%%00009var yScale;%%00010    %%00009%%00009if (d3.entries(_data.domains).length &gt; 0){%%00010    %%00009%%00009%%00009yScale = d3.scale.linear().domain([_value.options.oldHeight, 0]).range([h, 0]);%%00010    %%00009%%00009};%%00010    %%00009%%00009d3.keys(brushes).forEach(function(b) {%%00010    %%00009        %%00009if(_value.options.selections.extents[b]) {%%00010    %%00009        %%00009%%00009if (_data.colTypes[b] == &quot;string&quot; &amp;&amp; _value.options.oldHeight){%%00010    %%00009        %%00009%%00009%%00009brushes[b].extent([yScale(_value.options.selections.extents[b][0]), yScale(_value.options.selections.extents[b][1])]);%%00010    %%00009        %%00009%%00009} else {%%00010    %%00009        %%00009%%00009%%00009brushes[b].extent(_value.options.selections.extents[b]);%%00010    %%00009        %%00009%%00009}%%00010    %%00009        %%00009};%%00010    %%00009        });%%00010    %%00009        d3.selectAll(&quot;.brush&quot;).each(function(d) {%%00010    %%00009%%00009    %%00009  d3.select(this).call(brushes[d]); %%00010    %%00009   %%00009  %%00009});%%00010    %%00009        // draw xBrush%%00010    %%00009        if (_value.options.selections.xBrush){%%00010    %%00009        %%00009if (_value.options.oldWidth){%%00010    %%00009        %%00009%%00009var xScale = d3.scale.linear().domain([0, _value.options.oldWidth]).range([0, w]);%%00010    %%00009        %%00009%%00009xBrush.extent([xScale(_value.options.selections.xBrush[0]), xScale(_value.options.selections.xBrush[1])]);%%00010    %%00009        %%00009} else {%%00010    %%00009        %%00009%%00009xBrush.extent(_value.options.selections.xBrush);%%00010    %%00009        %%00009};%%00010    %%00009        %%00009d3.select(&quot;.xBrush&quot;).call(xBrush);%%00010    %%00009        }%%00010    %%00009      brush();%%00010    %%00009};%%00010    %%00009%%00010    };%%00010    %%00010    function selectRows(optSelection){%%00010    %%00009var selection = optSelection || _value.options.selectedrows; %%00010   %%00009%%00009d3.selectAll(&quot;.row&quot;).each(function(d, i) {%%00010   %%00009%%00009%%00009var selected = false, unselected = false;%%00010   %%00009%%00009%%00009if (selection &amp;&amp; selection.length &gt; 0) {%%00010   %%00009%%00009%%00009%%00009selected = selection &amp;&amp; selection.indexOf(this.getAttribute(&quot;id&quot;)) &gt; -1;%%00010   %%00009%%00009%%00009%%00009unselected = !selected;%%00010   %%00009%%00009%%00009%%00009%%00010   %%00009%%00009%%00009}%%00010   %%00009%%00009%%00009var row = d3.select(this);%%00010   %%00009%%00009%%00009if (!row.classed(&quot;filtered&quot;)) {%%00010   %%00009%%00009%%00009%%00009d3.select(this).classed({&quot;selected&quot;: selected, &quot;knime-selected&quot;: selected, &quot;unselected&quot;: unselected});%%00010   %%00009%%00009%%00009}%%00010   %%00009%%00009});%%00010   %%00009%%00009if (selection &amp;&amp; selection.length &gt; 0) {%%00010   %%00009%%00009%%00009rowsSelected = true;%%00010   %%00009%%00009}%%00010   %%00009%%00009if (d3.select(&quot;.selected&quot;).empty()) {%%00010   %%00009%%00009%%00009d3.selectAll(&quot;.row.unselected&quot;).classed(&quot;unselected&quot;, false);%%00010   %%00009%%00009%%00009rowsSelected = false;%%00010   %%00009%%00009}%%00010    };%%00010    %%00010    function brushstart() {%%00010%%00009%%00009rowsSelected = false;%%00010%%00009  d3.event.sourceEvent.stopPropagation();%%00010%%00009};%%00010    %%00010    function drawBrushes(par){%%00010    %%00009par = par || false;%%00010        d3.keys(brushes).forEach(function(b) {%%00010        %%00009if(extents[b]) {%%00010        %%00009%%00009if (par &amp;&amp; _data.colTypes[b] == &quot;string&quot;){%%00010        %%00009%%00009%%00009brushes[b].extent([ordinalScale(extents[b][0]),ordinalScale(extents[b][1])]);%%00010        %%00009%%00009} else {%%00010        %%00009%%00009%%00009brushes[b].extent(extents[b]);%%00010        %%00009%%00009}%%00010        %%00009}%%00010        });%%00010        d3.selectAll(&quot;.brush&quot;).each(function(d) {%%00010%%00009    %%00009  d3.select(this).call(brushes[d]); %%00010   %%00009  %%00009});%%00010        // draw xBrush%%00010        if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xExtent &amp;&amp; containMissing()){%%00010        %%00009if (par){%%00010        %%00009%%00009xBrush.extent([xBrushScale(xExtent[0]),xBrushScale(xExtent[1])]);%%00010        %%00009} else {%%00010        %%00009%%00009xBrush.extent(xExtent);%%00010        %%00009}%%00010        %%00009d3.select(&quot;.xBrush&quot;).call(xBrush);%%00010        };%%00010    };%%00010    %%00010    function resize(event) {%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected) {%%00010    %%00009%%00009getExtents();%%00010    %%00009%%00009oldHeight = h;%%00010    %%00009%%00009oldWidth = w;%%00010    %%00009};%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing %%00010    %%00009%%00009%%00009&amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()){%%00010    %%00009%%00009saveSelectedRows();%%00010    %%00009};%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing %%00010    %%00009%%00009%%00009&amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) {%%00010    %%00009%%00009saveSelectedRows();%%00010    %%00009}%%00010    %%00009drawChart();%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; brushes &amp;&amp; !rowsSelected) {%%00010    %%00009%%00009ordinalScale = d3.scale.linear().domain([oldHeight, 0]).range([h, 0]);%%00010    %%00009%%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xExtent &amp;&amp; containMissing()){%%00010    %%00009%%00009%%00009xBrushScale = d3.scale.linear().domain([0, oldWidth]).range([0, w]);%%00010    %%00009%%00009}%%00010%%00009    %%00009drawBrushes(true);%%00010%%00009    %%00009brush(null, null, null, true);%%00010    %%00009};%%00010    %%00009applyFilter();%%00010    };%%00010    %%00010    function saveSelected(){%%00010    %%00009_value.outColumns.selection = {};%%00010    %%00009// set every RowId to false %%00010    %%00009d3.selectAll(&quot;.row&quot;).each(function (row){%%00010    %%00009%%00009_value.outColumns.selection[row.id] = false;%%00010    %%00009});%%00010    %%00009// set to true selected%%00010    %%00009d3.selectAll(&quot;.row&quot;).filter(&quot;.selected&quot;).each(function (row){%%00010    %%00009%%00009_value.outColumns.selection[row.id] = true;%%00010    %%00009});%%00010    };%%00010%%00010    input.validate = function() {%%00010        return true;%%00010    };%%00010    %%00010    function saveSelectedRows(){%%00010%%00009    var selected = d3.selectAll(&quot;.row.selected&quot;);%%00010%%00009    if (!selected.empty()){%%00010%%00009    d3.selectAll(&quot;.row.selected&quot;).datum(function( d ) {%%00010%%00009    %%00009d.selected = true;%%00010%%00009    %%00009%%00009%%00009%%00009  return d;%%00010%%00009%%00009%%00009%%00009%%00009%%00009});%%00010%%00009%%00009d3.selectAll(&quot;.row.knime-selected&quot;).datum(function( d ) {%%00010%%00009%%00009%%00009d.selected = true;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009return d;%%00010%%00009%%00009%%00009%%00009%%00009%%00009});%%00010%%00009    d3.selectAll(&quot;.row.unselected&quot;).datum(function( d ) {%%00010%%00009    %%00009d.selected = false;%%00010%%00009    %%00009%%00009%%00009%%00009  return d;%%00010%%00009    %%00009%%00009%%00009%%00009});%%00010%%00009    %%00009};%%00010    };%%00010    %%00010    function isRowIncludedInFilter(rowId) {%%00010    %%00009var table = _representation.inObjects[0];%%00010    %%00009if (currentFilter &amp;&amp; currentFilter.elements) {%%00010%%00009%%00009%%00009var included = true;%%00010%%00009%%00009%%00009var row = getTableRow(rowId);%%00010%%00009%%00009%%00009for (var i = 0; i &lt; currentFilter.elements.length; i++) {%%00010%%00009%%00009%%00009%%00009var filterElement = currentFilter.elements[i];%%00010%%00009%%00009%%00009%%00009if (filterElement.type == &quot;range&quot; &amp;&amp; filterElement.columns) {%%00010%%00009%%00009%%00009%%00009%%00009for (var col = 0; col &lt; filterElement.columns.length; col++) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009var column = filterElement.columns[col];%%00010%%00009%%00009%%00009%%00009%%00009%%00009var columnIndex = getTableColumnId(column.columnName);%%00010%%00009%%00009%%00009%%00009%%00009%%00009if (columnIndex != null) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009var rowValue = row.data[columnIndex];%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (column.type = &quot;numeric&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (column.minimumInclusive) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009included &amp;= (rowValue &gt;= column.minimum);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009included &amp;= (rowValue &gt; column.minimum);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009if (column.maximumInclusive) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009included &amp;= (rowValue &lt;= column.maximum);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009included &amp;= (rowValue &lt; column.maximum);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009} else if (column.type = &quot;nominal&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009included &amp;= (column.values.indexOf(rowValue) &gt;= 0);%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009// TODO row filter - currently not possible%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009return included;%%00010%%00009%%00009}%%00010%%00009%%00009return true;%%00010    }%%00010    %%00010    function getTableColumnId( columnName) {%%00010    %%00009var table = _representation.inObjects[0];%%00010    %%00009var colID = null;%%00010%%00009%%00009for (var i = 0; i &lt; table.spec.numColumns; i++) {%%00010%%00009%%00009%%00009if (table.spec.colNames[i] === columnName) {%%00010%%00009%%00009%%00009%%00009colID = i;%%00010%%00009%%00009%%00009%%00009break;%%00010%%00009%%00009%%00009};%%00010%%00009%%00009};%%00010%%00009%%00009return colID;%%00010    }%%00010    %%00010    function getTableRow(rowId) {%%00010    %%00009var table = _representation.inObjects[0];%%00010%%00009%%00009for (var i = 0; i &lt; table.spec.numRows; i++) {%%00010%%00009%%00009%%00009if (table.rows[i].rowKey == rowId) {%%00010%%00009%%00009%%00009%%00009return table.rows[i];%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010    }%%00010    %%00010    function noBrushes(){%%00010    %%00009var noBrushes = true;%%00010    %%00009for (var i = 0; i &lt; _data.colNames.length; i++) {%%00010    %%00009%%00009//noBrushes &amp;= brushes[_data.colNames[i]].empty();%%00010    %%00009%%00009noBrushes = noBrushes &amp;&amp; brushes[_data.colNames[i]].empty();%%00010    %%00009};%%00010    %%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; xBrush &amp;&amp; containMissing()){%%00010    %%00009%%00009noBrushes = noBrushes &amp;&amp; xBrush.empty();%%00010    %%00009};%%00010    %%00009if (xBrush){%%00010    %%00009%%00009noBrushes = noBrushes &amp;&amp; xBrush.empty();%%00010    %%00009};%%00010    %%00009return noBrushes;%%00010    }%%00010    %%00010    function extraRows(){%%00010    %%00009if (!d3.selectAll(&quot;.row.selected&quot;).empty()){%%00010%%00009    %%00009d3.selectAll(&quot;.row&quot;).each(function(d){%%00010%%00009    %%00009%%00009if (!d3.select(this).classed(&quot;selected&quot;) &amp;&amp; !d3.select(this).classed(&quot;unselected&quot;)){%%00010%%00009    %%00009%%00009%%00009d3.select(this).classed(&quot;unselected&quot;, true);%%00010%%00009    %%00009%%00009};%%00010%%00009    %%00009})%%00010    %%00009};%%00010    };%%00010    %%00010    input.getComponentValue = function() {%%00010    %%00009if (!d3.selectAll(&quot;.axis&quot;).empty()){%%00010    %%00009%%00009saveSettingsToValue(true);%%00010    %%00009%%00009return _value;%%00010    %%00009} else {%%00010    %%00009%%00009return null;%%00010    %%00009}%%00010    }%%00010    %%00010    function containMissing(){%%00010    %%00009 var missing = false;%%00010         for (i = 0; i &lt; _data.objects.length; i++ ){%%00010        %%00009 missing = missing || (_data.objects[i].containsMissing == true);%%00010         };%%00010         return missing;%%00010    }%%00010    %%00010    function saveSettingsToValue(par){%%00010    %%00009par = par || false;%%00010    %%00009if (_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing) {%%00010%%00009    %%00009getExtents();%%00010%%00009    %%00009_value.options.selections = {};%%00010%%00009    %%00009_value.options.selections.extents = extents;%%00010%%00009    %%00009if (_value.options.mValues == MISSING_VALUE_MODE &amp;&amp; containMissing()){%%00010%%00009    %%00009%%00009if (!xBrush.empty()){%%00010%%00009    %%00009%%00009%%00009_value.options.selections.xBrush = xExtent;%%00010%%00009    %%00009%%00009}%%00010%%00009    %%00009}%%00010%%00009    %%00009// empty saved single rows selection%%00010%%00009    %%00009if (_value.options.selectedrows){%%00010%%00009    %%00009%%00009delete _value.options[&quot;selectedrows&quot;];%%00010%%00009    %%00009};%%00010    %%00009};%%00010    %%00009%%00010    %%00009if ((_representation.options.enableSelection &amp;&amp; _representation.options.enableBrushing &amp;&amp; noBrushes() &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()) %%00010    %%00009%%00009%%00009|| _representation.options.enableSelection &amp;&amp; !_representation.options.enableBrushing &amp;&amp; !d3.selectAll(&quot;.row.selected&quot;).empty()){%%00010    %%00009%%00009_value.options.selectedrows = [];%%00010    %%00009%%00009d3.selectAll(&quot;.row.selected&quot;).each(function (row){%%00010        %%00009%%00009_value.options.selectedrows.push(row.id);%%00010        %%00009});%%00010        %%00009// empty saved brushes%%00010        %%00009if (_value.options.selections){%%00010        %%00009%%00009delete _value.options[&quot;selection&quot;];%%00010        %%00009};%%00010    %%00009};%%00010    %%00009if (_representation.options.enableAxesSwapping) {%%00010    %%00009%%00009_value.options.sortedCols = _data.colNames;%%00010    %%00009}%%00010    %%00009if (par){%%00010    %%00009%%00009_value.options.oldHeight = h;%%00010    %%00009%%00009_value.options.oldWidth = w;%%00010    %%00009}%%00010    %%00009// save selected rows for the node output column%%00010    %%00009saveSelected();%%00010    }%%00010    %%00010    return input;%%00010%%00010}());%%00010"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value=".row:hover {%%00010%%00009stroke-opacity: 1;%%00010%%00009stroke-width: 3;%%00010%%00010}%%00010%%00010.row.selected {%%00010%%00009stroke-opacity: 0.9;%%00010%%00009stroke-width: 2;%%00010}%%00010%%00010.row.unselected {%%00010%%00009stroke-opacity: 0.1;%%00010}%%00010%%00010.row.filtered {%%00010%%00009display: none;%%00010}%%00010%%00010.xAxis line,.xAxis path {%%00010  fill: none;%%00010  stroke: lightgrey;%%00010  stroke-opacity: 0.5;%%00010}%%00010%%00010.xAxis text {%%00010%%00009opacity: 0;%%00010}"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="7"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="D3"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_2_8.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="MultipleSelections"/>
<entry key="path" type="xstring" value="org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="jQuery_1.11.0"/>
<entry key="1" type="xstring" value="KnimeTwinlist_1.0.0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_2">
<entry key="name" type="xstring" value="MultipleSelections"/>
<entry key="path" type="xstring" value="org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="jQuery_1.11.0"/>
<entry key="1" type="xstring" value="KnimeTwinlist_1.0.0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_3">
<entry key="name" type="xstring" value="MultipleSelections"/>
<entry key="path" type="xstring" value="org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="jQuery_1.11.0"/>
<entry key="1" type="xstring" value="KnimeTwinlist_1.0.0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_4">
<entry key="name" type="xstring" value="jQuery_1.11.0"/>
<entry key="path" type="xstring" value="js-lib/jQuery/jquery-1.11.0.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_5">
<entry key="name" type="xstring" value="KnimeTwinlist_1.0.0"/>
<entry key="path" type="xstring" value="js-lib/knime/knime_twinlist_1_0_0.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="jQuery_1.11.0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_6">
<entry key="name" type="xstring" value="jQuery_1.11.0"/>
<entry key="path" type="xstring" value="js-lib/jQuery/jquery-1.11.0.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" isnull="true" value=""/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="6"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="#False"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="11717"/>
<entry key="key_1" type="xstring" value="knime.workspace"/>
<entry key="class_1" type="xstring" value="java.lang.String"/>
<entry key="value_1" type="xstring" value="C:\Users\felix\Desktop\Google_Drive\IN\KNIME"/>
<entry key="key_2" type="xstring" value="Accuracy"/>
<entry key="class_2" type="xstring" value="java.lang.String"/>
<entry key="value_2" type="xstring" value="0.7043550666128381"/>
<entry key="key_3" type="xstring" value="#Correct"/>
<entry key="class_3" type="xstring" value="java.lang.String"/>
<entry key="value_3" type="xstring" value="27915"/>
<entry key="key_4" type="xstring" value="Error"/>
<entry key="class_4" type="xstring" value="java.lang.String"/>
<entry key="value_4" type="xstring" value="0.2956449333871619"/>
<entry key="key_5" type="xstring" value="Cohen's kappa"/>
<entry key="class_5" type="xstring" value="java.lang.String"/>
<entry key="value_5" type="xstring" value="0.11024667378615216"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="17"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="displayFullscreenButton"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="backgroundColor"/>
<entry key="class_1" type="xstring" value="java.lang.String"/>
<entry key="value_1" type="xstring" value="#FFFFFF"/>
<entry key="key_2" type="xstring" value="displayClearSelectionButton"/>
<entry key="class_2" type="xstring" value="java.lang.Boolean"/>
<entry key="value_2" type="xboolean" value="true"/>
<entry key="key_3" type="xstring" value="enableLineChange"/>
<entry key="class_3" type="xstring" value="java.lang.Boolean"/>
<entry key="value_3" type="xboolean" value="true"/>
<entry key="key_4" type="xstring" value="svg"/>
<entry key="class_4" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_4">
<entry key="width" type="xint" value="800"/>
<entry key="height" type="xint" value="600"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_5" type="xstring" value="showLegend"/>
<entry key="class_5" type="xstring" value="java.lang.Boolean"/>
<entry key="value_5" type="xboolean" value="true"/>
<entry key="key_6" type="xstring" value="enableTitleEdit"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="true"/>
<entry key="key_7" type="xstring" value="enableAxesSwapping"/>
<entry key="class_7" type="xstring" value="java.lang.Boolean"/>
<entry key="value_7" type="xboolean" value="true"/>
<entry key="key_8" type="xstring" value="enableSelection"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="enableBrushing"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="true"/>
<entry key="key_10" type="xstring" value="useColors"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="false"/>
<entry key="key_11" type="xstring" value="catCol"/>
<entry key="class_11" type="xstring" value="java.lang.String"/>
<entry key="value_11" type="xstring" value="nombre"/>
<entry key="key_12" type="xstring" value="enableViewControls"/>
<entry key="class_12" type="xstring" value="java.lang.Boolean"/>
<entry key="value_12" type="xboolean" value="true"/>
<entry key="key_13" type="xstring" value="enableColumnSelection"/>
<entry key="class_13" type="xstring" value="java.lang.Boolean"/>
<entry key="value_13" type="xboolean" value="true"/>
<entry key="key_14" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_14" type="xstring" value="java.lang.Boolean"/>
<entry key="value_14" type="xboolean" value="true"/>
<entry key="key_15" type="xstring" value="enableMValuesHandling"/>
<entry key="class_15" type="xstring" value="java.lang.Boolean"/>
<entry key="value_15" type="xboolean" value="true"/>
<entry key="key_16" type="xstring" value="daColor"/>
<entry key="class_16" type="xstring" value="java.lang.String"/>
<entry key="value_16" type="xstring" value="#FFFFFF"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="1"/>
<config key="inObject_0">
<entry key="knimeDataTableJSON" type="xstring" value="{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;c8c44764-acf2-4a0a-b6a2-8eddb37e3218&quot;,&quot;extensions&quot;:null,&quot;rows&quot;:[{&quot;data&quot;:[0.5477367775558271,2465.0,5261.0,25450.0,6456.0,0.27631431453872884,0.319052549831737,0.8286933020741754,0.29614945635850304,&quot;Tree Decision&quot;,0.4785183609073549,0.7043550666128381],&quot;rowKey&quot;:&quot;Tree Decision&quot;},{&quot;data&quot;:[0.7153199870244049,865.0,697.0,30021.0,8061.0,0.09690790947792964,0.5537772087067862,0.9773097206849404,0.16495041952707856,&quot;Gradient Bossted&quot;,0.30774834190298556,0.77908384623146],&quot;rowKey&quot;:&quot;Gradient Boosted&quot;},{&quot;data&quot;:[0.644830447675207,6263.0,14634.0,16084.0,2663.0,0.7016580775263276,0.29970809207063215,0.5236017969919917,0.42001140059685477,&quot;Naive Bayes&quot;,0.6061265794095582,0.5636918575320351],&quot;rowKey&quot;:&quot;Naive Bayes&quot;},{&quot;data&quot;:[0.7001338836265227,613.0,555.0,30163.0,8313.0,0.06867577862424379,0.5248287671232876,0.9819324174750961,0.12145829205468595,&quot;Random Forest&quot;,0.2596824470896873,0.7763091514478861],&quot;rowKey&quot;:&quot;Random Forest&quot;},{&quot;data&quot;:[0.5537891841035647,305.0,494.0,23228.0,6540.0,0.04455807158509861,0.38172715894868586,0.9791754489503415,0.07980115122972266,&quot;K-NN&quot;,0.2088783611308275,0.7698825530801191],&quot;rowKey&quot;:&quot;K-NN&quot;},{&quot;data&quot;:[0.6950954004449336,493.0,392.0,30326.0,8433.0,0.05523190678915528,0.5570621468926553,0.9872387525229507,0.10049943940474979,&quot;Red Neuronal&quot;,0.2335103397239393,0.7773938048632832],&quot;rowKey&quot;:&quot;Red Neuronal&quot;}],&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numColumns&quot;:12,&quot;numRows&quot;:6,&quot;colNames&quot;:[&quot;Area Under Curve&quot;,&quot;TruePositives&quot;,&quot;FalsePositives&quot;,&quot;TrueNegatives&quot;,&quot;FalseNegatives&quot;,&quot;Recall&quot;,&quot;Precision&quot;,&quot;Specifity&quot;,&quot;F-measure&quot;,&quot;nombre&quot;,&quot;G-mean&quot;,&quot;Accuracy&quot;],&quot;colTypes&quot;:[&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;,&quot;string&quot;,&quot;number&quot;,&quot;number&quot;],&quot;numExtensions&quot;:0,&quot;maxValues&quot;:[0.7153199870244049,6263.0,14634.0,30326.0,8433.0,0.7016580775263276,0.5570621468926553,0.9872387525229507,0.42001140059685477,&quot;Tree Decision&quot;,0.6061265794095582,0.77908384623146],&quot;minValues&quot;:[0.5477367775558271,305.0,392.0,16084.0,2663.0,0.04455807158509861,0.29970809207063215,0.5236017969919917,0.07980115122972266,&quot;Gradient Bossted&quot;,0.2088783611308275,0.5636918575320351],&quot;rowSizeValues&quot;:null,&quot;colorModels&quot;:[],&quot;knimeTypes&quot;:[&quot;Number (double)&quot;,&quot;Number (integer)&quot;,&quot;Number (integer)&quot;,&quot;Number (integer)&quot;,&quot;Number (integer)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;,&quot;String&quot;,&quot;Number (double)&quot;,&quot;Number (double)&quot;],&quot;possibleValues&quot;:[null,null,null,null,null,null,null,null,null,[&quot;Tree Decision&quot;,&quot;Gradient Bossted&quot;,&quot;Naive Bayes&quot;,&quot;Random Forest&quot;,&quot;K-NN&quot;,&quot;Red Neuronal&quot;],null,null],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;containsMissingValues&quot;:[false,false,false,false,false,false,false,false,false,false,false,false],&quot;filterIds&quot;:[null,null,null,null,null,null,null,null,null,null,null,null],&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[]},&quot;dataHash&quot;:null}"/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
